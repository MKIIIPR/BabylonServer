
@using AshesMapBib.Models.GameRelatedModels
@using AshesMapBib.Models.GameRelatedModels.AshesOfCreation
@using FrontUI.Components
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using MudBlazor
@using System.Text.Json
@typeparam T where T : AshesMapBib.Models.GameRelatedModels.AshesOfCreation.IGameItem

<MudTextField @bind-Value="SearchString" Immediate="true" Label="Search" Clearable="true" Variant="Variant.Text" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Secondary" />
<div style="overflow-y:auto;height:100%">
    
  
    <MudNavMenu Style="" Dense="true">
        @if (SearchResultsFlat.Any())
        {
            <Virtualize Items="SearchResultsFlat" Context="node">
                <NavNodeView Node="node" OnItemSelected="Market.SetMarketItem" />
            </Virtualize>
        }
        else if (NavTree.Children.Any())
        {
            foreach (var node in NavTree.Children)
            {
                <NavNodeView Node="node" OnItemSelected="Market.SetMarketItem" />
            }
        }
        else
        {
            <MudText Class="px-4">Keine Items gefunden.</MudText>
        }
    </MudNavMenu>
    </div>
@code {
    [CascadingParameter] public CascadingMarketData<T> Market { get; set; } = new();


    [Parameter] public  ItemRootTree NavTree { get; set; } = new();

    
    public List<ItemRootTree> SearchResultsFlat { get; set; } = new();
    private string _searchString;

    public string SearchString
    {
        get => _searchString;
        set
        {
            if (_searchString != value)
            {
                _searchString = value;
                UpdateSearchResultsFlat(NavTree, _searchString); // Trigger Suche bei Änderung
            }
        }
    }
    public void UpdateSearchResultsFlat(ItemRootTree root, string searchString)
    {
        SearchResultsFlat.Clear();
        if (string.IsNullOrWhiteSpace(searchString)) return;

        CollectMatchingNodes(root, searchString.ToLower());
    }

    private void CollectMatchingNodes(ItemRootTree node, string searchString)
    {
        if (node == null) return;

        if (!string.IsNullOrWhiteSpace(node.Name) && node.Name.ToLower().Contains(searchString))
        {
            SearchResultsFlat.Add(new ItemRootTree
            {
                Id = node.Id,
                Name = node.Name,
                GameId = node.GameId,
                Icon = node.Icon,
                Children = new List<ItemRootTree>() // leer, entkoppelt vom Original
            });
        }

        foreach (var child in node.Children)
        {
            CollectMatchingNodes(child, searchString);
        }
    }

    protected override void OnInitialized()
    {
        

    }
   



}
