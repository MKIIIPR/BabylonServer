@using AshesMapBib.Models
@using Microsoft.AspNetCore.Components
@using AshesMapBib.Models.GameRelatedModels.AshesOfCreation
@using Services.MarketPlaceServcies
@inject IMarketService _marketService
@typeparam T where T : AshesMapBib.Models.GameRelatedModels.AshesOfCreation.IGameItem
@inject MarketContext<T>? mContext

@code {
    // Achtung: nullable, weil es initial null ist
   
   

    private string gameName = "Counter Strike Global Offensive";
}

@if (mContext is null)
{
    <!-- Lade-Placeholder, bis die Daten da sind -->
    <p>Lade Marktdaten…</p>
}
else
{
    <h3>Marktplatz für @gameName</h3>

    <MudContainer Class="mt-4 px-4" MaxWidth="MaxWidth.False">
        <MudGrid>
            <MudItem xs="12" sm="4" md="3">
                <MudPaper Elevation="4" Class="pa-4" Style="height:85.3vh;overflow:hidden">
                   
                    <!-- Auch hier guarden, falls ItemRoot selbst null sein könnte -->
                    @if (mContext.ItemRoot != null)
                    {
                        <MarketNavTree T="T" NavTree="@mContext.ItemRoot" />
                    }
                </MudPaper>
            </MudItem>

            <MudItem xs="12" sm="8" md="9">

                <ResizeableContainer  Style="height: 85.3vh; display: flex; flex-direction: column;">
                    <Top>
                        <MarketTable OrderList="@(Market.OrderList.Where(order => order.OrderType.Contains("buy")).ToList())"></MarketTable>
                    </Top>
                    <Middle>
                        <h3 style="height:50px">Sell Order</h3>
                    </Middle>
                    <Bottom>
                        <MarketTable OrderList="@(Market.OrderList.Where(order => order.OrderType.Contains("sell")).ToList())"></MarketTable>
                    </Bottom>
                </ResizeableContainer>
            </MudItem>
        </MudGrid>
    </MudContainer>
}
@code{
    [CascadingParameter] public CascadingMarketData<T> Market { get; set; } = new();
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
    }
    

}