@using AshesMapBib.Models
@using Services.MarketPlaceServcies
@typeparam T where T : AshesMapBib.Models.GameRelatedModels.AshesOfCreation.IGameItem

@inject InGameItemContext<T> _igContext
@inject IMarketService _marketService

@if (Market is null)
{
    <p>Lade Marktdaten…</p>
}
else
{
    <CascadingValue Value="this">
        @ChildContent
    </CascadingValue>
}

@code {
    [Parameter] public string GameId { get; set; } = "AOCItem";
    [Parameter] public RenderFragment? ChildContent { get; set; }

    public string ItemSearchId { get; set; } = "Gear_Armor_Heavy_2ndSwordDivision_Feet";
    public List<MarketItem> OrderList { get; set; } = new();
    public MarketContext<T>? Market { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("[CascadingMarketData] Initializing…");

        // Sicherstellen, dass DI funktioniert
        Console.WriteLine($"[CascadingMarketData] _igContext null? {_igContext == null}");
        Console.WriteLine($"[CascadingMarketData] _marketService null? {_marketService == null}");

        await _igContext.EnsureCompleteLoaded();
        Market = new MarketContext<T>(_igContext);
        await LoadInitialMarketData();
    }

    private async Task LoadInitialMarketData()
    {
        if (!string.IsNullOrWhiteSpace(ItemSearchId))
        {
            OrderList = await _marketService.GetItemsForGameAsync(typeof(T).Name, ItemSearchId);
            await InvokeAsync(StateHasChanged);
        }
    }

    public async Task SetMarketItem(string itemId)
    {
        Console.WriteLine($"[CascadingMarketData] SetMarketItem invoked with: {itemId}");
        ItemSearchId = itemId;

        // Sicherstellen, dass Services noch gültig sind
        Console.WriteLine($"[CascadingMarketData] _igContext null? {_igContext == null}");
        Console.WriteLine($"[CascadingMarketData] _marketService null? {_marketService == null}");

        OrderList = await _marketService.GetItemsForGameAsync(typeof(T).Name, itemId);
        await InvokeAsync(StateHasChanged);
    }
}
