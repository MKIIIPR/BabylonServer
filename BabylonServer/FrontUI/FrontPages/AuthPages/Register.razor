@page "/register"
@using AshesMapBib.Models.AccountModels.ClientModel
@using FrontUI.AppStates
@using FrontUI.AuthenticationServices
@using Microsoft.AspNetCore.Components.Forms
@using PWAPortal.Authentication
@using Portal.Models
@using Services.AccountServices.ClientServices.Api

@inject IUserEndpoint UserEndpoint
@inject IAuthenticationService AuthService
@inject NavigationManager NavManager
@inject IClientService _clientService

<MudPaper Elevation="4" Class="pa-6 mx-auto mt-6" MaxWidth="500px">
    <MudText Typo="Typo.h5" Class="mb-4">Create an Account</MudText>

    @if (!string.IsNullOrWhiteSpace(errorMessage))
    {
        <MudAlert Severity="Severity.Error" Dense="true" Elevation="0">
            @errorMessage
        </MudAlert>
    }

    <MudTextField Label="Username" @bind-Value="model.UserName" For="@(() => model.UserName)" Required="true" />
    <MudTextField Label="Email Address" @bind-Value="model.Email" For="@(() => model.Email)" Required="true" />
    <MudTextField Label="Password" @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password" Required="true" />
    <MudTextField Label="Confirm Password" @bind-Value="model.ConfirmPassword" For="@(() => model.ConfirmPassword)" InputType="InputType.Password" Required="true" />

    <MudStack Class="mt-4" Row="true" Justify="Justify.FlexEnd">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Button" OnClick="Submit">
            Create Account
        </MudButton>
    </MudStack>
</MudPaper>

@code {
        CreateUserModel model = new();
        string errorMessage = string.Empty;

    private async Task Submit()
    {
        errorMessage = "";

        if (model.Password != model.ConfirmPassword)
        {
            errorMessage = "Passwords do not match.";
            return;
        }

        try
        {
            var Result = await UserEndpoint.CreateUser(model);
            if (Result.Status.Contains("error"))
            {
                errorMessage = Result.Status;
                return;
                
            }
            AuthenticatedUserModel result = await AuthService.Login(new()
                {
                    UserName = model.UserName,
                    Password = model.Password
                });

            if (result is not null)
            {
                NavManager.NavigateTo("/");
            }
            else
            {
                errorMessage = "Registration succeeded, but login failed.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
}
