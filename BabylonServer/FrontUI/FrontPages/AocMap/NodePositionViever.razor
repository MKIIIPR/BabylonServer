
@using AshesMapBib.Models
@using System.Threading
@using FrontUI.AppStates
@using Microsoft.JSInterop
@using MudBlazor
@inject IJSRuntime JS

<MudPaper Height="91.3vh" Style="overflow:hidden">

    <!-- NodePosition Auswahl -->
       @if (_mapData.FilteredPosList != null)
    {
          
        <MudToggleGroup Outlined="false" T="string" SelectionMode="SelectionMode.MultiSelection" @bind-Values="_mapData.timeLeftFilter" Color="Color.Secondary" CheckMark>

            <MudToggleItem Style="background-color: forestgreen;color:black" Value="@("act")"
                           UnselectedIcon="@Icons.Material.Filled.CheckBoxOutlineBlank"
                           SelectedIcon="@Icons.Material.Filled.CheckBox" />
            <MudToggleItem Style="background-color: darkorange; color:black" Value="@("<-4h")"
                           UnselectedIcon="@Icons.Material.Filled.CheckBoxOutlineBlank"
                           SelectedIcon="@Icons.Material.Filled.CheckBox" />
            <MudToggleItem Style="background-color: rebeccapurple; color:black" Value="@("<-8h")"
                           UnselectedIcon="@Icons.Material.Filled.CheckBoxOutlineBlank"
                           SelectedIcon="@Icons.Material.Filled.CheckBox" />
            <MudToggleItem Style="background-color: orangered; color:black" Value="@("<-1d")"
                           UnselectedIcon="@Icons.Material.Filled.CheckBoxOutlineBlank"
                           SelectedIcon="@Icons.Material.Filled.CheckBox" />
            <MudToggleItem Style="background-color: red; color:black" Value="@(">-1d")"
                           UnselectedIcon="@Icons.Material.Filled.CheckBoxOutlineBlank"
                           SelectedIcon="@Icons.Material.Filled.CheckBox" />
        </MudToggleGroup>
      
        @code {
        private IEnumerable<string> _value2 = Enumerable.Empty<string>();
        private IEnumerable<string>? _value21 = Enumerable.Empty<string>();
        private string _style = "custom-striped";
        private string _value = "Antimatter";
    }
      <MudChipSet @bind-SelectedValues="_mapData.selectedFilter" SelectionMode="SelectionMode.MultiSelection" CheckMark>
				@foreach (var rarity in _mapData.NodePositionList.Select(node => node.Rarity).Distinct().OrderBy(r => r).ToList())
					{
					<MudChip Value="@rarity">
						@GetRarityText(rarity)
					</MudChip>
					}
			</MudChipSet>
        <br />
        <MudDivider>
            
        </MudDivider>
    @if (_mapData.SelectedPosition != null)
    {
        <NodePositionComponent NodePosition="_mapData.SelectedPosition" />
    }
 
      
      


    }

    @if (_mapData.FilteredPosList != null)
    {
        <MudRadioGroup T="NodePositionView" @bind-Value="_mapData.SelectedPosition" Style="display:flex; flex-direction: column;flex-wrap: nowrap;overflow-y:auto;height:90%;">
            @foreach (var spot in _mapData.FilteredPosList)
            {
                <MudRadio Value="spot" Color="Color.Primary" Dense="true">
                    <ChildContent>
                        <NodePositionComponent NodePosition="spot" />
                    </ChildContent>

                </MudRadio>
            }
        </MudRadioGroup>
    }


</MudPaper>
<style>
    .mud-input-control>.mud-input-control-input-container {
    position: relative;
    display: flex
    ;
    flex-direction: column;
    }
</style>
@code {
    // @CascadingParameter ermöglicht den Zugriff auf den globalen Zustand von _mapData
    [CascadingParameter] public CascadingMapData _mapData { get; set; }

    // Variablen und Timer-Setup
    public NodePositionView selectedNode { get; set; }
    private Timer _timer;
    private bool _open = false; // Steuert, ob das Drawer geöffnet ist
    public void UpdateSelectedNode(NodePositionView spot){
        selectedNode = new();
        selectedNode = spot;
    }
    // Entfernt alle Marker von der Karte
    private async Task RemoveMarkers()
    {
        await JS.InvokeVoidAsync("removeCustomMarkers");
    }
    protected override Task OnParametersSetAsync()
    {
        return base.OnParametersSetAsync();
    }

    // Timer-Update-Funktion, die den Zustand bei aktivem Timer jede Sekunde aktualisiert
    protected override void OnInitialized()
    {
        _timer = new Timer(UpdateTimer, null, 0, 1000);
        base.OnInitialized();
    }

    private void UpdateTimer(object state)
    {
        if (_mapData.Timer)
        {
            InvokeAsync(StateHasChanged);
        }
    }

    // Callback-Methode, wenn der Drawer geöffnet/geschlossen werden soll
    private void ToggleDrawer()
    {
        _open = !_open;
    }

    // Wird aufgerufen, wenn ein Node ausgewählt wird
    private void OnNodeSelected(NodePositionView node)
    {
        CenterOnMap(node);
    }

    // Zentriert die Karte auf den ausgewählten Node
    private void CenterOnMap(NodePositionView node)
    {
        Console.WriteLine($"Center on map: {node.Node.Name}");
    }

    // Entsorgt den Timer, wenn die Komponente zerstört wird
    public void Dispose()
    {
        _timer?.Dispose();
    }
    private string GetRarityText(string hexColor)
	{
		return hexColor switch
		{
			"2c35be" => "Rare",
			"f3eb0a" => "Heroic",
			"9b1cdc" => "Epic",
			"ff5700" => "Legendary",
			_ => "Unknown"
		};
	}
}

